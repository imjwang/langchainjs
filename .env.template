# You must first activate a Billing Account here: https://platform.openai.com/account/billing/overview
# Then get your OpenAI API Key here: https://platform.openai.com/account/api-keys
# OPENAI_API_KEY==

# Generate a random secret: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`
# AUTH_SECRET=
# Create a GitHub OAuth app here: https://github.com/settings/applications/new
# Authorization callback URL: https://authjs.dev/reference/core/providers_github#callback-url
# AUTH_GITHUB_ID=
# AUTH_GITHUB_SECRET=
# Support OAuth login on preview deployments, see: https://authjs.dev/guides/basics/deployment#securing-a-preview-deployment
# Set the following only when deployed. In this example, we can reuse the same OAuth app, but if you are storing users, we recommend using a different OAuth app for development/production so that you don't mix your test and production user base.
# AUTH_REDIRECT_PROXY_URL=https://YOURAPP.vercel.app/api/auth

# Supabase
# NEXT_PUBLIC_SUPABASE_URL==
# NEXT_PUBLIC_SUPABASE_ANON_KEY==

# Langsmith
# LANGCHAIN_TRACING_V2=true
# LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
# LANGCHAIN_API_KEY=
# LANGCHAIN_PROJECT=

# LANGCHAIN_VERBOSE=true
# COHERE_API_KEY=

# Bedrock
# BEDROCK_AWS_ACCESS_KEY_ID=
# BEDROCK_AWS_SECRET_ACCESS_KEY=

# Google
# GOOGLE_API_KEY=

# Voyage
# VOYAGEAI_API_KEY=

# Tavily
# TAVILY_API_KEY=

# Exa
# EXASEARCH_API_KEY=

# Anthropic
# ANTHROPIC_API_KEY=
